schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

input Find_user {
  first_name: String
  last_name: String
}

type Mutation {
  User_login(input: User_auth): user_login @join__field(graph: AUTHENTICATIONSERVICES)
  createEmployee(input: UserCreateInput): employee @join__field(graph: AUTHENTICATIONSERVICES)
  find_employee_historyLogs(input: logHistory): employee_logs @join__field(graph: TIMESERVICES)
  input_employee_TimeIn(input: time_in): employee_logs @join__field(graph: TIMESERVICES)
  input_employee_TimeOut(input: time_out): employee_logs @join__field(graph: TIMESERVICES)
  list_employee(input: Find_user): employee @join__field(graph: AUTHENTICATIONSERVICES)
}

type Payload {
  token: String
  user: employee
}

type Query {
  find(id: ID!): employee! @join__field(graph: AUTHENTICATIONSERVICES)
  getAllEmployee_history_logs: [employee_logs] @join__field(graph: TIMESERVICES)
  list: employee! @join__field(graph: AUTHENTICATIONSERVICES)
  setTimer: [employee_logs] @join__field(graph: TIMESERVICES)
}

input UserCreateInput {
  email: String!
  first_name: String!
  gender: String!
  last_name: String!
  password: String!
  position: String!
  username: String!
}

input User_auth {
  email: String!
  password: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

type employee {
  createdAt: String
  email: String!
  first_name: String
  gender: String
  id: ID!
  last_name: String
  password: String!
  position: String
  username: String
}

type employee_logs {
  full_name: String
  history_log: String
  id: ID
  indicators: String
  report: String
  time_in: String
  time_out: String
}

scalar join__FieldSet

enum join__Graph {
  AUTHENTICATIONSERVICES @join__graph(name: "AuthenticationServices" url: "http://127.0.0.1:5050/")
  TIMESERVICES @join__graph(name: "TimeServices" url: "http://127.0.0.1:8000/")
}

input logHistory {
  full_name: String
}

input time_in {
  full_name: String
}

input time_out {
  full_name: String
}

type user_login {
  email: String!
  password: String!
}
